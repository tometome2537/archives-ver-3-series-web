/* tslint:disable */
/* eslint-disable */
/**
 * api node tometome
 * API documentation.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  V1XPostsGet200Response,
  V1XPostsGet500Response,
  V1XUserGet200Response,
} from '../models/index';
import {
    V1XPostsGet200ResponseFromJSON,
    V1XPostsGet200ResponseToJSON,
    V1XPostsGet500ResponseFromJSON,
    V1XPostsGet500ResponseToJSON,
    V1XUserGet200ResponseFromJSON,
    V1XUserGet200ResponseToJSON,
} from '../models/index';

export interface V1XPostsGetRequest {
    userid?: string;
    postid?: string;
}

export interface V1XUserGetRequest {
    userid: string;
}

/**
 * 
 */
export class XApi extends runtime.BaseAPI {

    /**
     * Fetches posts and user information based on user ID or post ID.
     * Retrieve posts and user data
     */
    async v1XPostsGetRaw(requestParameters: V1XPostsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1XPostsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['userid'] != null) {
            queryParameters['userid'] = requestParameters['userid'];
        }

        if (requestParameters['postid'] != null) {
            queryParameters['postid'] = requestParameters['postid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // TokenAuth authentication
        }

        const response = await this.request({
            path: `/v1/x/posts`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1XPostsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetches posts and user information based on user ID or post ID.
     * Retrieve posts and user data
     */
    async v1XPostsGet(requestParameters: V1XPostsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1XPostsGet200Response> {
        const response = await this.v1XPostsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Fetches user information based on user ID.
     * Retrieve user data
     */
    async v1XUserGetRaw(requestParameters: V1XUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1XUserGet200Response>> {
        if (requestParameters['userid'] == null) {
            throw new runtime.RequiredError(
                'userid',
                'Required parameter "userid" was null or undefined when calling v1XUserGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['userid'] != null) {
            queryParameters['userid'] = requestParameters['userid'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // TokenAuth authentication
        }

        const response = await this.request({
            path: `/v1/x/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1XUserGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Fetches user information based on user ID.
     * Retrieve user data
     */
    async v1XUserGet(requestParameters: V1XUserGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1XUserGet200Response> {
        const response = await this.v1XUserGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
