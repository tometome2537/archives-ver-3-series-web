/* tslint:disable */
/* eslint-disable */
/**
 * api node tometome
 * API documentation.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface YoutubeRelease
 */
export interface YoutubeRelease {
    /**
     * 
     * @type {string}
     * @memberof YoutubeRelease
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeRelease
     */
    audioPlaylistId?: string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeRelease
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof YoutubeRelease
     */
    title?: string;
    /**
     * 
     * @type {number}
     * @memberof YoutubeRelease
     */
    year?: number;
    /**
     * 
     * @type {string}
     * @memberof YoutubeRelease
     */
    thumbnailUrl?: string;
    /**
     * 
     * @type {number}
     * @memberof YoutubeRelease
     */
    duration?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof YoutubeRelease
     */
    artistChannelIds?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof YoutubeRelease
     */
    trackVideoIds?: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof YoutubeRelease
     */
    createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof YoutubeRelease
     */
    lastUpdated?: Date;
}

/**
 * Check if a given object implements the YoutubeRelease interface.
 */
export function instanceOfYoutubeRelease(value: object): value is YoutubeRelease {
    return true;
}

export function YoutubeReleaseFromJSON(json: any): YoutubeRelease {
    return YoutubeReleaseFromJSONTyped(json, false);
}

export function YoutubeReleaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): YoutubeRelease {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'audioPlaylistId': json['audio_playlist_id'] == null ? undefined : json['audio_playlist_id'],
        'type': json['type'] == null ? undefined : json['type'],
        'title': json['title'] == null ? undefined : json['title'],
        'year': json['year'] == null ? undefined : json['year'],
        'thumbnailUrl': json['thumbnail_url'] == null ? undefined : json['thumbnail_url'],
        'duration': json['duration'] == null ? undefined : json['duration'],
        'artistChannelIds': json['artist_channel_ids'] == null ? undefined : json['artist_channel_ids'],
        'trackVideoIds': json['track_video_ids'] == null ? undefined : json['track_video_ids'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'lastUpdated': json['last_updated'] == null ? undefined : (new Date(json['last_updated'])),
    };
}

export function YoutubeReleaseToJSON(json: any): YoutubeRelease {
    return YoutubeReleaseToJSONTyped(json, false);
}

export function YoutubeReleaseToJSONTyped(value?: YoutubeRelease | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'audio_playlist_id': value['audioPlaylistId'],
        'type': value['type'],
        'title': value['title'],
        'year': value['year'],
        'thumbnail_url': value['thumbnailUrl'],
        'duration': value['duration'],
        'artist_channel_ids': value['artistChannelIds'],
        'track_video_ids': value['trackVideoIds'],
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'last_updated': value['lastUpdated'] == null ? undefined : ((value['lastUpdated']).toISOString()),
    };
}

